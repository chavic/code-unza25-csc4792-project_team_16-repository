[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "parliament-relevance-classifier"
version = "0.1.0"
description = "CSC 4792 Group Project - Classify MP utterances as relevant/not relevant to motions"
authors = [
    {name = "Team 16", email = "team16@unza.zm"},
]
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "beautifulsoup4>=4.12.0",
    "requests>=2.31.0",
    "tqdm>=4.65.0",
    "typer>=0.9.0",
    "jinja2>=3.1.0",
    "matplotlib>=3.7.0",
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "evaluate>=0.4.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.0.280",
    "pre-commit>=3.3.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
]
notebook = [
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "nbformat>=5.9.0",
]

[project.scripts]
classify-relevance = "src.app.cli:main"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
pythonpath = [
    "src",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
